name: KMP RUN Publish iOS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Configuration environment'
        required: true
        type: choice
        options: [rc, prod]

env:
  JAVA_VERSION: "17"

permissions:
  contents: write
  packages: write

concurrency:
  group: kmp-ios-publish-${{ github.ref }}-${{ github.event.inputs.environment }}
  cancel-in-progress: true

jobs:
  build-and-publish-ios-sdk:
    runs-on: macos-15
    env:
      XC_VERSION: "16.3"
      FRAMEWORKS_REPO: velocitycareerlabs/KmpIosFrameworks
      PAT_TOKEN: ${{ secrets.VCL_RW_ACCESS_TOKEN }}

    steps:
      - name: üßæ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XC_VERSION }}.app

      - name: ‚òï Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: üõ†Ô∏è Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Print tool versions
        run: |
          java -version
          ./gradlew --version
          pod --version || true

      - name: üìù Read base version from gradle.properties
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          VERSION=$(grep '^PUBLISH_VERSION=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          if [ -z "$VERSION" ]; then echo "PUBLISH_VERSION missing in gradle.properties"; exit 1; fi
          echo "base_version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Found base version: $VERSION"

      - name: üîß Compute EFFECTIVE_VERSION
        id: eff
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ steps.ver.outputs.base_version }}"
          if [ "${{ github.event.inputs.environment }}" = "rc" ]; then
            EFFECTIVE="${BASE}-rc"; PRERELEASE=true
          else
            EFFECTIVE="${BASE}"; PRERELEASE=false
          fi
          echo "effective=$EFFECTIVE" >> "$GITHUB_OUTPUT"
          echo "EFFECTIVE_VERSION=$EFFECTIVE" >> "$GITHUB_ENV"
          echo "IS_PRERELEASE=$PRERELEASE" >> "$GITHUB_ENV"
          echo "Effective version: $EFFECTIVE (prerelease=$PRERELEASE)"

      - name: üèóÔ∏è Build XCFramework via KMP
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew --no-daemon --warning-mode=all \
            :velocityexchangeverifiers:clean \
            :velocityexchangeverifiers:assembleIos \
            -PprojectVersion=${{ steps.ver.outputs.base_version }} \
            -Pprerelease=${{ github.event.inputs.environment == 'rc' }} \
            --stacktrace

      - name: üßæ Generate podspec via KMP
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew --no-daemon :velocityexchangeverifiers:podspec \
            -PprojectVersion=${{ steps.ver.outputs.base_version }} \
            -Pprerelease=${{ github.event.inputs.environment == 'rc' }}

      - name: üîé Locate outputs & validate podspec version
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          
          # XCFramework (release)
          XCF="velocityexchangeverifiers/build/XCFrameworks/release/velocityexchangeverifiers.xcframework"
          test -d "$XCF" || { echo "XCFramework not found: $XCF"; exit 1; }
          
          # Try module-root podspec first (typical for KMP Cocoapods plugin)
          ROOT_PODSPEC="velocityexchangeverifiers/velocityexchangeverifiers.podspec"
          if [[ -f "$ROOT_PODSPEC" ]]; then
            PODSPEC="$ROOT_PODSPEC"
          else
            # Fallback: look under build/ (some setups place it there)
            PODSPEC=$(find velocityexchangeverifiers/build -maxdepth 6 -type f -name "*.podspec" | head -n1 || true)
          fi
          
          if [[ -z "${PODSPEC:-}" || ! -f "$PODSPEC" ]]; then
            echo "Podspec not found in module root or under build/. Tree (trimmed):"
            find velocityexchangeverifiers -maxdepth 4 -print
            exit 1
          fi
          
          echo "Found podspec at: $PODSPEC"
          echo "xcframework=$XCF" >> "$GITHUB_OUTPUT"
          echo "podspec=$PODSPEC" >> "$GITHUB_OUTPUT"
          
          # Validate version matches EFFECTIVE_VERSION (already set by Gradle)
          if ! grep -E "spec\.version\s*=\s*['\"]${EFFECTIVE_VERSION}['\"]" "$PODSPEC" >/dev/null; then
            echo "‚ùå Podspec version mismatch (expected ${EFFECTIVE_VERSION})"
            sed -n '1,160p' "$PODSPEC"
            exit 1
          fi
          echo "‚úÖ Podspec version OK"

      - name: üì¶ Zip XCFramework
        id: zipit
        shell: bash
        run: |
          set -euo pipefail
          OUT="velocityexchangeverifiers-${{ env.EFFECTIVE_VERSION }}.xcframework.zip"
          ditto -c -k --sequesterRsrc --keepParent "${{ steps.locate.outputs.xcframework }}" "$OUT"
          echo "zip=$OUT" >> "$GITHUB_OUTPUT"
          ls -lh "$OUT"

      - name: üîç Sanity check zip contents
        shell: bash
        run: |
          set -euo pipefail
          ZIP="${{ steps.zipit.outputs.zip }}"
          unzip -l "$ZIP" | sed -n '1,60p'
          unzip -l "$ZIP" | grep -q "velocityexchangeverifiers\.xcframework/" || {
            echo "‚ùå zip does not contain velocityexchangeverifiers.xcframework at the expected path"; exit 1; }
          echo "‚úÖ zip contents OK"

      - name: üîë Git identity
        shell: bash
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: ‚¨áÔ∏è Clone Frameworks repo
        shell: bash
        run: |
          set -euo pipefail
          git clone https://${{ env.PAT_TOKEN }}@github.com/${{ env.FRAMEWORKS_REPO }} frameworks-repo

      - name: üóÇÔ∏è Place artifacts into Frameworks repo and commit (binary)
        working-directory: frameworks-repo
        shell: bash
        run: |
          set -euo pipefail
          VER="${{ env.EFFECTIVE_VERSION }}"
          DEST_DIR="VelocityExchangeVerifiers/${VER}"
          mkdir -p "$DEST_DIR"
          cp -f "../${{ steps.zipit.outputs.zip }}" "$DEST_DIR/"
          git add -A
          git diff --cached --quiet && echo "No binary changes to commit" || git commit -m "VelocityExchangeVerifiers ${VER} (xcframework zip)"
          git pull --rebase || true
          git push

      - name: üß© Create/update Specs folder inside Frameworks repo and commit (podspec)
        working-directory: frameworks-repo
        shell: bash
        run: |
          set -euo pipefail
          VER="${{ env.EFFECTIVE_VERSION }}"
          SPECS_DIR="KmpIosSpecs/VelocityExchangeVerifiers/${VER}"
          mkdir -p "$SPECS_DIR"

          cp -f "../${{ steps.locate.outputs.podspec }}" "$SPECS_DIR/VelocityExchangeVerifiers.podspec"
          PODSPEC="$SPECS_DIR/VelocityExchangeVerifiers.podspec"

          # Normalize required fields
          perl -0777 -pe "s/(^|\\n)\\s*(s|spec)\\.name\\s*=\\s*['\"][^'\"]+['\"]/\\n  s.name = 'VelocityExchangeVerifiers'/s" -i "$PODSPEC"

          ZIP_URL="https://raw.githubusercontent.com/${{ env.FRAMEWORKS_REPO }}/main/VelocityExchangeVerifiers/${VER}/velocityexchangeverifiers-${VER}.xcframework.zip"
          perl -0777 -pe "s/(^|\\n)\\s*(s|spec)\\.source\\s*=\\s*\\{[^}]*\\}/\\n  s.source = { :http => '${ZIP_URL}' }/s" -i "$PODSPEC"
          perl -0777 -pe "s/(^|\\n)\\s*(s|spec)\\.vendored_frameworks\\s*=\\s*['\"][^'\"]+['\"]/\\n  s.vendored_frameworks = 'velocityexchangeverifiers.xcframework'/s" -i "$PODSPEC"
          perl -0777 -pe "s/(^|\\n)\\s*(s|spec)\\.version\\s*=\\s*['\"][^'\"]+['\"]/\\n  s.version = '${VER}'/s" -i "$PODSPEC"

          git add -A
          git diff --cached --quiet && echo "No spec changes to commit" || git commit -m "Specs VelocityExchangeVerifiers ${VER}"
          git pull --rebase || true
          git push

      - name: ‚¨ÜÔ∏è Upload artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ env.EFFECTIVE_VERSION }}
          path: |
            ${{ steps.zipit.outputs.zip }}
