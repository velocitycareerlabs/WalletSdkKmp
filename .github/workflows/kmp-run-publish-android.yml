name: KMP RUN Publish Android

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options: [rc, prod]

env:
  JAVA_VERSION: "17"

permissions:
  contents: write
  packages: write

concurrency:
  group: kmp-android-publish-${{ github.ref }}-${{ github.event.inputs.environment }}
  cancel-in-progress: true

jobs:
  release-android-sdk:
    runs-on: macos-15
    env:
      SDK_NAME: velocityexchangeverifiers

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🛠️ Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Print tool versions
        run: |
          java -version
          ./gradlew --version

      - name: 📝 Read versions & group from gradle.properties
        shell: bash
        run: |
          set -euo pipefail
          VERSION=$(grep '^PUBLISH_VERSION=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          GROUP=$(grep '^PUBLISH_GROUP_ID=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          [ -n "${VERSION:-}" ] || { echo "PUBLISH_VERSION missing"; exit 1; }
          [ -n "${GROUP:-}" ]   || { echo "PUBLISH_GROUP_ID missing"; exit 1; }

          echo "RELEASE_VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "MAVEN_GROUP_ID=$GROUP"    >> "$GITHUB_ENV"
          echo "MAVEN_GROUP_PATH=${GROUP//./\/}" >> "$GITHUB_ENV"
          echo "Found version=$VERSION groupId=$GROUP"

      - name: 🔧 Compute effective version + names
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.event.inputs.environment }}" = "rc" ]; then
            PUB_NAME="rc"; EFFECTIVE="${RELEASE_VERSION}-rc"
          else
            PUB_NAME="release"; EFFECTIVE="${RELEASE_VERSION}"
          fi
          echo "PUBLICATION_NAME=${PUB_NAME}" >> "$GITHUB_ENV"
          echo "EFFECTIVE_VERSION=${EFFECTIVE}" >> "$GITHUB_ENV"
          echo "POM_FILE_NAME=${SDK_NAME}-${EFFECTIVE}.pom" >> "$GITHUB_ENV"
          echo "RELEASE_REPO=${GITHUB_REPOSITORY#*/}" >> "$GITHUB_ENV"

      - name: 🧪 Build AAR + Sources + Javadoc
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew --no-daemon --warning-mode=all \
            :${SDK_NAME}:clean \
            :${SDK_NAME}:assembleAndroid \
            -PprojectVersion=${RELEASE_VERSION} \
            -Pprerelease=${{ github.event.inputs.environment == 'rc' }} \
            --stacktrace

      - name: ✅ Verify expected artifacts exist (module task)
        run: |
          ./gradlew --no-daemon :${{ env.SDK_NAME }}:verifyExpectedArtifactsExist \
            -PprojectVersion=${RELEASE_VERSION} \
            -Pprerelease=${{ github.event.inputs.environment == 'rc' }}

      - name: 🧹 Clean module staging root
        shell: bash
        run: |
          set -euo pipefail
          rm -rf ${SDK_NAME}/target/staging-deploy
          mkdir -p ${SDK_NAME}/target/staging-deploy

      - name: 📦 Stage artifacts (module task)
        run: |
          ./gradlew --no-daemon :${{ env.SDK_NAME }}:stageArtifacts \
            -PprojectVersion=${RELEASE_VERSION} \
            -Pprerelease=${{ github.event.inputs.environment == 'rc' }}

      - name: 🧪 Generate POM File (module)
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew --no-daemon :${SDK_NAME}:generatePomFileFor${{ env.PUBLICATION_NAME }}Publication \
            -PprojectVersion=${RELEASE_VERSION} -Pprerelease=${{ github.event.inputs.environment == 'rc' }}

          mkdir -p ${SDK_NAME}/target/staging-deploy/${MAVEN_GROUP_PATH}/${SDK_NAME}/${EFFECTIVE_VERSION}
          cp ${SDK_NAME}/build/publications/${{ env.PUBLICATION_NAME }}/pom-default.xml \
             ${SDK_NAME}/target/staging-deploy/${MAVEN_GROUP_PATH}/${SDK_NAME}/${EFFECTIVE_VERSION}/${POM_FILE_NAME}

      - name: 🌉 Mirror staged artifacts to repo root (preflight)
        run: |
          mkdir -p target/staging-deploy
          rsync -av --delete ${SDK_NAME}/target/staging-deploy/ target/staging-deploy/
          echo "Repo-root staging after preflight mirror:"
          find target/staging-deploy -maxdepth 6 -type f -print | sed 's/^/ - /'

      - name: 📂 List staged artifacts (module + root)
        run: |
          echo "== Module staging =="
          ls -R ${SDK_NAME}/target/staging-deploy || true
          echo "== Repo-root staging =="
          ls -R target/staging-deploy || true

      - name: 🔒 Guard staged contents (repo-root)
        shell: bash
        run: |
          set -euo pipefail
          BASE=target/staging-deploy/${MAVEN_GROUP_PATH}/${SDK_NAME}
          echo "Contents of $BASE:"; ls -1 "$BASE" || true
          for d in "$BASE"/*; do
            [ -d "$d" ] || continue
            bn=$(basename "$d")
            if [ "$bn" != "${EFFECTIVE_VERSION}" ]; then
              echo "Unexpected version dir present: $bn"; exit 1
            fi
          done
          ls -1 "$BASE/${EFFECTIVE_VERSION}"

      - name: 🔎 Verify POM version (repo-root)
        shell: bash
        run: |
          set -euo pipefail
          POM=target/staging-deploy/${MAVEN_GROUP_PATH}/${SDK_NAME}/${EFFECTIVE_VERSION}/${POM_FILE_NAME}
          grep -q "<version>${EFFECTIVE_VERSION}</version>" "$POM" || { echo "POM version mismatch"; exit 1; }

      - name: ⬆️ Upload staged bundle (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: staged-${{ env.SDK_NAME }}-${{ env.EFFECTIVE_VERSION }}
          path: target/staging-deploy

      - name: ✅ Validate staged files (repo-root)
        shell: bash
        run: |
          set -euo pipefail
          dir=target/staging-deploy/${MAVEN_GROUP_PATH}/${SDK_NAME}/${EFFECTIVE_VERSION}
          echo "📂 Validating: $dir"
          ls -l "$dir" || true
          missing=0
          check() {
            local f="$1"
            if [[ -f "$dir/$f" ]]; then
              echo "✅ Found $f"
            else
              echo "❌ Missing $f"
              missing=1
            fi
          }
          check "${POM_FILE_NAME}"
          check "${SDK_NAME}-${EFFECTIVE_VERSION}.aar"
          check "${SDK_NAME}-${EFFECTIVE_VERSION}-sources.jar"
          check "${SDK_NAME}-${EFFECTIVE_VERSION}-javadoc.jar"
          if [[ $missing -ne 0 ]]; then
            echo "🔎 Debugging hints:"
            echo "  • ${SDK_NAME}/build/libs:"
            ls -l ${SDK_NAME}/build/libs || true
            echo "  • ${SDK_NAME}/build/outputs/aar:"
            ls -l ${SDK_NAME}/build/outputs/aar || true
            exit 1
          fi

      - name: 🔍 Echo what JReleaser will attach
        run: |
          echo "AARs in repo-root staging:"
          find target/staging-deploy -type f -name "*.aar" -print

      - name: 🔒 Hard fail if exact AAR path missing
        shell: bash
        run: |
          set -euo pipefail
          AAR="target/staging-deploy/${MAVEN_GROUP_PATH}/${SDK_NAME}/${EFFECTIVE_VERSION}/${SDK_NAME}-${EFFECTIVE_VERSION}.aar"
          echo "Expecting AAR at: $AAR"
          test -f "$AAR" || { echo "❌ AAR missing at $AAR"; echo "Contents of target/staging-deploy:"; find target/staging-deploy -maxdepth 6 -type f -print; exit 1; }
          echo "✅ Found $AAR"

      - name: Set RELEASE_REPO for JReleaser
        shell: bash
        run: echo "RELEASE_REPO=${GITHUB_REPOSITORY#*/}" >> "$GITHUB_ENV"

      - name: 🔍 Show JReleaser config that will be used
        run: |
          echo "=== BEGIN jreleaser.template.yml ==="
          cat jreleaser.template.yml || true
          echo "=== END jreleaser.template.yml ==="

      - name: 🚀 Run JReleaser full-release
        uses: jreleaser/release-action@v2
        with:
          version: 1.18.0
          arguments: >
            full-release
            --config-file=jreleaser.template.yml
            --debug
        env:
          # Generic for any SDK
          JRELEASER_PROJECT_JAVA_ARTIFACT_ID: ${{ env.SDK_NAME }}
          JRELEASER_PROJECT_VERSION: ${{ env.EFFECTIVE_VERSION }}
          JRELEASER_TAG_NAME: ${{ env.EFFECTIVE_VERSION }}
          JRELEASER_RELEASE_NAME: ${{ github.event.inputs.environment == 'rc' && 'Release Candidate ' || '' }}${{ env.EFFECTIVE_VERSION }}
          JRELEASER_PRERELEASE_PATTERN: ${{ github.event.inputs.environment == 'rc' && env.EFFECTIVE_VERSION || 'OFF' }}
          # Repo + tokens
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_TOKEN_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_TOKEN_PASSWORD }}
          JRELEASER_MAVENCENTRAL_STAGE: ${{ secrets.MAVEN_CENTRAL_STAGING_PROFILE_ID }}
          # Signing (memory mode)
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.MAVEN_CENTRAL_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.MAVEN_CENTRAL_GPG_PRIVATE_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_SIGNING_PASSWORD }}
          # JReleaser release repo name
          RELEASE_REPO: ${{ env.RELEASE_REPO }}
